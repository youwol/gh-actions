name: Create a new version of Typescript project, optionnally publishing it
on:
  workflow_call:
    inputs:
      version:
        description: 'the version to release'
        required: true
        type: string
      dry-run:
        description: 'use dry-run/* branches and do not publish anything'
        required: false
        type: boolean
        default: true # To be change to false once ready, obviously
    secrets:
      nestor_gpg_priv:
        description: Nestor GPG armored private key
        required: true
      nestor_github_pat:
        description: Nestor Github PAT
        required: true

jobs:
  make-release:
    runs-on: ubuntu-latest
    env:
      new_version: ${{ inputs.version }}
    steps:
      - name: Set up repo
        id: action_ts_set_up_repo
        uses: youwol/gh-actions/ts_set_up_repo@main
        with:
          token: ${{ secrets.NESTOR_GITHUB_PAT }}

      - name: Check new version string with yarn semver
        id: check_new_version
        env:
          current_version: ${{ steps.action_ts_set_up_repo.outputs.version }}
        run: |
          ### Check new version string
          echo "Comparing input '${new_version}' to current version '${current_version}'"
          #
          new_version_exact=$(yarn -s semver -l "${new_version}")
          if [ -z "${new_version_exact}" ]; then
            echo "::error title=Incorrect new version::'${new_version}' does not look like a version string"
            exit 1
          fi
          echo "'${new_version}' is parseable"
          #
          if [ "${new_version_exact}" != "${new_version}" ]; then
            message="'${new_version}' does not look like a version string. Did you mean '${new_version_exact}' ?"
            echo "::error title=Incorrect new version::${message}"
            exit 1
          fi
          echo "'${new_version}' is a correct version string"
          #
          latest_version=$(yarn -s semver "${current_version}" "${new_version}" | tail -n1 )
          if [ "${latest_version}" != "${new_version}" ]; then
            echo "::error title=Incorrect new version::'${new_version}' is older than '${current_version}'"
            exit 1
          fi
          echo "'${new_version}' is newer than '${current_version}'"

      - name: Static analysis of Typescript project
        id: action_ts_static_analysis
        uses: youwol/gh-actions/ts_static_analysis@main
        with:
          archive: ts_static_analysis

      - name: Set up Nestor
        id: set_up_nestor
        uses: youwol/gh-actions/set_up_nestor@main
        with:
          gpgKey: ${{ secrets.NESTOR_GPG_PRIV }}

      - name: Update version of Typescript project
        id: yarn_version
        env:
          GNUPGHOME: ${{ steps.set_up_nestor.outputs.gnupghome }}
        run: |
          ### Update version
          yarn -s version --new-version ${new_version}
          echo "::set-output name=tag::v${new_version}"

      - name: Build Typescript artefacts
        id: action_ts_build_artefacts
        uses: youwol/gh-actions/ts_build_artefacts@main
        with:
          archive: ts_build_artefacts

      - name: Prepare next version of Typescript project
        id: yarn_next_version
        env:
          GNUPGHOME: ${{ steps.set_up_nestor.outputs.gnupghome }}
        run: |
          ### Prepare next version
          next_version=$(yarn -s semver -i patch ${new_version})-wip
          echo "::group::setting package.json version to ${next_version}"
          yarn -s version --no-git-tag-version --new-version ${next_version}
          echo "::endgroup::"
          echo "::group::Commiting package.json"
          git add package.json
          git commit -m "ðŸ”– start ${next_version}"
          echo "::endgroup::"
          echo "::set-output name=version::${next_version}"

      - name: Fast-forward main branch to track latest release
        id: fast_forword_main
        env:
          tag: ${{ steps.update_version.outputs.tag }}
        run: |
          ### Fast-forward main
          echo "::group::Fetching origin"
          git fetch origin main:main --unshallow
          echo "::endgroup::"
          echo "::group::Checkout main"
          git checkout main
          echo "::endgroup::"
          echo "::group::Fast-forward branch main to tag ${tag}"
          git merge --ff-only ${tag} 
          echo "::endgroup::"

      - name: Modify upstream branches for dry-run
        id: dry_run
        if: inputs.dryRun
        run: |
          ### Set upstreams to dry-run/* branches
          echo "::group::Fetching origin"
          git fetch origin dry-run/develop dry-run/main
          echo "::endgroup::"
          echo "::group::Rename branch develop to dry-run/develop"
          git branch develop -m dry-run/develop
          echo "::endgroup::"
          echo "::group::Rename branch main to dry-run/main"
          git branch main -m dry-run/main
          echo "::endgroup::"
          echo "::warning title=Dry-run::Pushing to dry-run/* branches. Version tag will still be pushed, albeit not on main & develop !"

      - name: Push commits
        id: push
        run: git push --atomic origin --all --follow-tags

      - name: Summary
        id: summary
        env:
          previous_version: ${{ steps.set_up_repo.outputs.version }}
          next_version: ${{ steps.prepare_next_version.outputs.next_version }}
          project_name: ${{ steps.set_up_repo.outputs.name }}
        run: |
          ### Log Summary
          echo "::notice title=${project_name} ${new_version}::New version '${new_version}' tagged on branch main & develop"
          echo "::notice title=Bump ${project_name} to version ${next_version}::Bump project '${project_name}' version '${previous_version}' => '${next_version}'"

  publish-npmjs:
    runs-on: ubuntu-latest
    needs: make-release
    steps:
      - name: Set up repo
        id: set_up_repo
        uses: youwol/gh-actions/set_up_repo@main
        with:
          ref: v${{ inputs.newVersion }}
          token: ${{ secrets.github_token }}
      - name: dowload whole repo
        uses: action/download@v3
        with:
          name: whole_repo

      - name: Publish NPMjs
        id: publish_npmjs
        if: ! inputs.dryRun
        run: yarn publish



  publish-pages:
    runs-on: ubuntu-latest
    needs: make-release
    env:
      dry_run: true
    steps:
      - name: Set up repo
        id: set_up_repo
        uses: youwol/gh-actions/set_up_repo@main
        with:
          ref:
          token: ${{ secrets.github_token }}

      - name: Publish Pages
        id: publish_pages
        run: echo "::warning::Not implemented (WIP)"

  publish-CDN:
    runs-on: ubuntu-latest
    needs: make-release
    steps:
      - name: dowload whole repo
        uses: action/download@v3
        with:
          name: whole_repo

      - name: Set up repo
        id: set_up_repo
        uses: youwol/gh-actions/set_up_repo@main
        with:
          ref: v${{ inputs.newVersion }}
          token: ${{ secrets.github_token }}

      - name: Publish CDN
        id: publish_pages
        run: echo "::warning::Not implemented (WIP)"
